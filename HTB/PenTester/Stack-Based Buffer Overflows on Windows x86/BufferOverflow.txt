Binary exploitation is among the most essential skills for any pentester.
It is usually the way to find the most advanced vulnerabilities in programs and operating systems and requires a lot of skill.

Buffer Overflows

In Binary exploitation, our primary goal is to subvert the binary's execution in a way that benefits us.
Buffer Overflows are the most common type of binary exploitation, but other types of binary exploitation exist, such as Format String exploitation and Heap Exploitation.

A buffer overflow occurs when a program receives data that is longer than expected,
such that it overwrites the entire buffer memory space on the stack.

This can overwrite the next Instruction Pointer EIP (or RIP in x86_64),
which causes the program to crash because it will attempt to execute instructions at an invalid memory address. 

Another basic attack is to overwrite a value on the stack to change the program's behavior.

If we are a bit more sophisticated, we can change the address of EIP to an instruction that will execute our shellcode

we may use a combination of instructions from the binary to execute a particular function and overwrite various pointers to change the program execution flow.
This is known as Return Oriented Programming (ROP) attacks.

modern programs and operating systems may use the Heap instead of the Stack to store buffer memory
which would require Heap Overflows or Heap Exploitation methods.

_________________________________
Stack Overflow

The stack has a Last-in, First-out (LIFO) design, which means we can only pop out the last element pushed into the stack.
If we push an item into the stack, it would be located on the top of the stack.
If we pop anything from the stack, the item located at the top of the stack would get popped.

Whenever a function is called, a new stack frame is created, and the old EIP address gets pushed to the top of the new stack frame,
so the program knows where to return once the function is finished.
For example, if our buffer input overwrites the entire stack and return address EIP
then the overwritten EIP address will be called when the function returns due to a RET instruction.

If we calculate our input precisely, we can place a valid address in the location where EIP is stored.
This would lead the program to go to our overwritten address when it returns and subvert the program execution flow to an address of our choosing.

_________________________________
Stack Overflow Protections

most of them are pretty old, aging back at least a decade.
This is because modern operating systems have many protections for the stack,
like preventing code execution or randomly changing the memory addresses.

However, even with these types of protections, if a program is vulnerable to a Buffer Overflow, there are
advanced methods to bypass these protections. Some examples include the previously mentioned Return
Oriented Programming (ROP) or Windows-specific exploitation methods like Egg Hunting or Structured Exception
Handling (SEH) exploitation.

_________________________________
Why Learn Basic Stack Overflows?

But if basic stack-based overflows are no longer common these days, then why should we learn them?
We do so because learning them gives us a good understanding of the basics of binary exploitation and the fundamentals of exploit development.

Furthermore, once we master how to detect and exploit basic stack-based buffer overflows, it will be much easier to learn Structured Exception Handling (SEH), which is very common in modern Windows systems.

Finally, once we get a good grip on basic stack overflows and basic mitigation bypasses, we would be ready to
start learning advanced mitigation bypass methods, like (ROP) and other advanced binary exploitation methods.

