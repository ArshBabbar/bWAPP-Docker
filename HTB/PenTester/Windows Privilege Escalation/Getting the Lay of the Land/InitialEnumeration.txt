We can escalate privileges to one of the following depending on the system configuration and what type of data we encounter:

1.The highly privileged NT AUTHORITY\SYSTEM account, or LocalSystem account which is a highly privileged account with more privileges than a local administrator account and is used to run most Windows services.

2.The built-in local administrator account. Some organizations disable this account, but many do not. It is not uncommon to see this account reused across multiple systems in a client environment.

3.Another local account that is a member of the local Administrators group. Any account in this group will have the same privileges as the built-in administrator account.

4.A standard (non-privileged) domain user who is part of the local Administrators group.

5.A domain admin (highly privileged in the Active Directory environment) that is part of the local Administrators group.

________________________________________
This Windows commands reference is very handy for performing manual enumeration tasks.

---->https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands

________________________________________
Key Data Points

1.OS Name

2.Version

3.Running services

________________________________________
System Information

Using the tasklist command to look at running processes will give us a better idea of what applications are currently running on the system.
Cmd:
tasklist /svc

It is essential to become familiar with standard Windows processes such as:

Session Manager Subsystem (smss.exe) -->https://en.wikipedia.org/wiki/Session_Manager_Subsystem
Client Server Runtime Subsystem (csrss.exe) -->https://en.wikipedia.org/wiki/Client/Server_Runtime_Subsystem
WinLogon (winlogon.exe) -->https://en.wikipedia.org/wiki/Winlogon
Local Security Authority Subsystem Service (LSASS) -->https://en.wikipedia.org/wiki/Local_Security_Authority_Subsystem_Service
Service Host (svchost.exe) -->https://en.wikipedia.org/wiki/Svchost.exe
among others and the services associated with them.

________________________________________
Display All Environment Variables

The environment variables explain a lot about the host configuration.
To get a printout of them, Windows provides the set command.
One of the most overlooked variables is PATH

-->Roaming Profiles -->https://learn.microsoft.com/en-us/windows-server/storage/folder-redirection/folder-redirection-rup-overview

If a file is placed in USERPROFILE\AppData\Microsoft\Windows\Start Menu\Programs\Startup, when the user logs into a different machine, this file will execute.
Cmd:
set
________________________________________
View Detailed Configuration Information

The systeminfo command will show if the box has been patched recently and if it is a VM.
Google the KBs installed under HotFixes to get an idea of when the box has been patched.
-->HotFixes -->https://www.catalog.update.microsoft.com/Search.aspx?q=hotfix
The System Boot Time and OS Version can also be checked to get an idea of the patch level

Cmd:
systeminfo

________________________________________
Patches and Updates

If systeminfo doesn't display hotfixes, they may be queriable with WMI using the
WMI-Command binary -->https://learn.microsoft.com/en-us/windows/win32/wmisdk/wmi-start-page
with QFE (Quick Fix Engineering) -->https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-quickfixengineering
to display patches.

Cmd:
wmic qfe

-->
We can do this with PowerShell as well using the Get-Hotfix cmdlet.
https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-hotfix?view=powershell-7.4&viewFallbackFrom=powershell-7.1
Cmd:
Get-HotFix | ft -AutoSize
________________________________________
Installed Programs

WMI can also be used to display installed software.
Is FileZilla/Putty/etc installed? Run LaZagne to check if stored credentials for those applications are installed.

Cmd:
wmic product get name

We can also do this with PowerShell as well using the Get-WmiObject cmdlet.
https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1
Cmd:
Get-WmiObject -Class Win32_Product |  select Name, Version

________________________________________
Display Running Processes

The netstat command will display active TCP and UDP connections which will give us a better idea of what services are listening on which port(s) both locally and accessible to the outside.
Cmd:
netstat -ano

________________________________________
User & Group Information

We may find the system to be well patched, but a member of the local administrators group's user directory is browsable and contains a password file such as logins.xlsx, resulting in a very easy win.

-///--->>>
Logged-In Users

It is always important to determine what users are logged into a system.
During an evasive engagement, we would need to tread lightly on a host with other user(s) actively working on it to avoid detection.
Cmd:
query user

-///--->>>
Current User

When we gain access to a host, we should always check what user context our account is running under first. Sometimes, we are already SYSTEM or equivalent! 
we may have privileges such as SeImpersonatePrivilege, which can often be easily abused to escalate privileges using a tool such as Juicy Potato.
https://github.com/ohpe/juicy-potato
Cmd:
echo %USERNAME%

-///--->>>
Current User Privileges

Cmd:
whoami /priv

-///--->>>
Current User Group Information

Cmd:
whoami /groups

-///--->>>
Get All Users

Cmd:
net user

-///--->>>
Get All Groups
Cmd:
net localgroup

-///--->>>
Details About a Group
Cmd:
net localgroup administrators

-///--->>>
Get Password Policy & Other Account Information
Cmd:
net accounts


////--------->>>>>>>>>>>>
Usefull Cheat sheets:
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md
