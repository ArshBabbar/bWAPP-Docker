Metasploit modules are prepared scripts with a specific purpose and corresponding functions that have already been developed and tested in the wild.
The exploit category consists of so-called proof-of-concept (POCs) that can be used to exploit existing vulnerabilities in a largely automated manner.

Once we are in the msfconsole, we can select from an extensive list containing all the available Metasploit modules. 
Each of them is structured into folders, which will look like this:

Syntax
<No.> <type>/<os>/<service>/<name>

1.Index No.
The No. tag will be displayed to select the exploit we want afterward during our searches.

2.Type
The Type tag is the first level of segregation between the Metasploit modules. Looking at this field, we can tell what the piece of code for this module will accomplish.
To explain better, here are the possible types that could appear in this field:

Type	    Description
Auxiliary	Scanning, fuzzing, sniffing, and admin capabilities. Offer extra assistance and functionality.
Encoders	Ensure that payloads are intact to their destination.
Exploits	Defined as modules that exploit a vulnerability that will allow for the payload delivery.
NOPs	    (No Operation code) Keep the payload sizes consistent across exploit attempts.
Payloads	Code runs remotely and calls back to the attacker machine to establish a connection (or shell).
Plugins	    Additional scripts can be integrated within an assessment with msfconsole and coexist.
Post	    Wide array of modules to gather information, pivot deeper, etc.

he use <no.> command can only be used with the following modules that can be used as initiators (or interactable modules):

Type	    Description
Auxiliary	Scanning, fuzzing, sniffing, and admin capabilities. Offer extra assistance and functionality.
Exploits	Defined as modules that exploit a vulnerability that will allow for the payload delivery.
Post	    Wide array of modules to gather information, pivot deeper, etc.

3.OS
The OS tag specifies which operating system and architecture the module was created for.

4.Service
The Service tag refers to the vulnerable service that is running on the target machine.

5.Name
Finally, the Name tag explains the actual action that can be performed using this module created for a specific purpose.

_________________________________
Searching for Modules

With the help of this function, we can quickly search through all the modules using specific tags to find a suitable one for our target.

MSF - Search Function
Example:
msf6 > help search

We can also make our search a bit more coarse and reduce it to one category of services. For example,
for the CVE, we could specify the year (cve:<year>), the platform Windows (platform:<os>),
the type of module we want to find (type:<auxiliary/exploit/post>),
the reliability rank (rank:<rank>), and the search name (<pattern>). 


msf6 > search eternalromance

We can also make our search a bit more coarse and reduce it to one category of services.
For example, for the CVE, we could specify the year (cve:<year>), the platform Windows (platform:<os>), the type of module we want to find (type:<auxiliary/exploit/post>), the reliability rank (rank:<rank>), and the search name (<pattern>).

msf6 > search type:exploit platform:windows cve:2021 rank:excellent microsoft

_________________________________
Module Selection

To select our first module, we first need to find one.
Let's suppose that we have a target running a version of SMB vulnerable to EternalRomance (MS17_010) exploits.
We have found that SMB server port 445 is open upon scanning the target.

nmap -sV 10.10.10.40

We would boot up msfconsole and search for this exact exploit name.
From the Nmap scan, we have detected the SMB service running on version Microsoft Windows 7 - 10.

We then proceed to select the module with the index no. 2 to test if the target is vulnerable.
--> 2  auxiliary/admin/smb/ms17_010_command

_________________________________
Using Modules

we can use the show options command.
Everything required to be set before the exploitation can occur will have a Yes under the Required column.

----MSF - Module Information----
Cmd:
msf6 exploit(windows/smb/ms17_010_psexec) > info
     name of command 

----MSF - Target Specification----
set RHOSTS 10.10.10.40

In addition, there is the option setg, which specifies options selected by us as permanent until the program is restarted. 

---MSF - Permanent Target Specification---
setg RHOSTS 10.10.10.40

-----MSF - Exploit Execution----
run

This has been a quick and dirty example of how msfconsole can help out quickly but serves as an excellent example of how the framework works.
Only one module was needed without any payload selection, encoding or pivoting between sessions or jobs.

